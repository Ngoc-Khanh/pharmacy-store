import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { useStep6 } from "@/hooks/use-step-form";
import { formatCurrency } from "@/lib/utils";
import { motion } from "framer-motion";
import {
  Star,
  MessageCircle,
  RotateCcw,
  Home,
  ShoppingBag,
  FileText,
  ThumbsUp,
  Heart,
  Sparkles,
  Bot,
  HelpCircle,
  Send,
  Award
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useState } from "react";
import { toast } from "sonner";

export const Step6Feedback = () => {
  const navigate = useNavigate();
  const { 
    feedbackRating, 
    setFeedbackRating, 
    feedbackComment, 
    setFeedbackComment,
    isValid,
    resetForm,
    placedOrder 
  } = useStep6();

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleRatingSelect = (rating: number) => {
    setFeedbackRating(rating);
  };

  const handleSubmitFeedback = async () => {
    if (!isValid) {
      toast.error("Vui l√≤ng ƒë√°nh gi√° d·ªãch v·ª• tr∆∞·ªõc khi g·ª≠i");
      return;
    }

    setIsSubmitting(true);
    try {
      // TODO: Implement feedback submission API
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
      
      toast.success("C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω! √ù ki·∫øn c·ªßa b·∫°n r·∫•t quan tr·ªçng v·ªõi ch√∫ng t√¥i.");
    } catch {
      toast.error("C√≥ l·ªói x·∫£y ra khi g·ª≠i g√≥p √Ω. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleStartNewConsultation = () => {
    resetForm();
    toast.success("B·∫Øt ƒë·∫ßu t∆∞ v·∫•n m·ªõi");
  };

  const handleGoHome = () => {
    navigate("/");
  };

  const handleViewOrders = () => {
    navigate("/profile/orders");
  };

  const handleContinueShopping = () => {
    navigate("/medicines");
  };

  const getRatingText = (rating: number) => {
    switch (rating) {
      case 1: return "R·∫•t kh√¥ng h√†i l√≤ng";
      case 2: return "Kh√¥ng h√†i l√≤ng";
      case 3: return "B√¨nh th∆∞·ªùng";
      case 4: return "H√†i l√≤ng";
      case 5: return "R·∫•t h√†i l√≤ng";
      default: return "";
    }
  };

  const getRatingColor = (rating: number) => {
    switch (rating) {
      case 1: return "text-red-500";
      case 2: return "text-orange-500";
      case 3: return "text-yellow-500";
      case 4: return "text-green-500";
      case 5: return "text-emerald-500";
      default: return "text-gray-400";
    }
  };

  return (
    <div className="space-y-6 max-w-4xl mx-auto">
      {/* Success Summary */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
          className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-emerald-100 to-green-100 dark:from-emerald-900/30 dark:to-green-900/30 rounded-full mb-6 shadow-lg"
        >
          <Award className="w-10 h-10 text-emerald-600 dark:text-emerald-400" />
        </motion.div>

        <motion.h2
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4 }}
          className="text-3xl font-bold bg-gradient-to-r from-emerald-600 via-green-600 to-teal-600 bg-clip-text text-transparent mb-3"
        >
          T∆∞ v·∫•n ho√†n t·∫•t! üéâ
        </motion.h2>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
          className="space-y-2"
        >
          <p className="text-muted-foreground text-lg">
            C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng d·ªãch v·ª• t∆∞ v·∫•n AI c·ªßa Pharmacity
          </p>
          {placedOrder && (
            <div className="flex items-center justify-center gap-2">
              <span className="text-sm text-muted-foreground">ƒê∆°n h√†ng:</span>
              <Badge variant="outline" className="font-mono text-sm px-3 py-1">
                #{placedOrder.id}
              </Badge>
              <span className="text-sm font-semibold text-emerald-600">
                {formatCurrency(placedOrder.totalPrice || 0)}
              </span>
            </div>
          )}
        </motion.div>
      </motion.div>

      {/* Feedback Section */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
      >
        <Card className="border-purple-200 dark:border-purple-800/50 bg-gradient-to-br from-purple-50/50 to-pink-50/50 dark:from-purple-950/20 dark:to-pink-950/20">
          <CardContent className="p-6">
            <div className="flex items-center gap-2 mb-6">
              <Heart className="w-5 h-5 text-purple-600" />
              <h3 className="text-xl font-semibold text-purple-700 dark:text-purple-300">
                ƒê√°nh gi√° tr·∫£i nghi·ªám t∆∞ v·∫•n
              </h3>
            </div>

            <div className="space-y-6">
              {/* Rating Stars */}
              <div className="text-center">
                <p className="text-sm text-muted-foreground mb-4">
                  B·∫°n c·∫£m th·∫•y th·∫ø n√†o v·ªÅ d·ªãch v·ª• t∆∞ v·∫•n AI?
                </p>
                
                <div className="flex justify-center gap-2 mb-3">
                  {[1, 2, 3, 4, 5].map((rating) => (
                    <Button
                      key={rating}
                      variant="ghost"
                      size="lg"
                      onClick={() => handleRatingSelect(rating)}
                      className={`hover:bg-yellow-100 dark:hover:bg-yellow-900/20 p-2 transition-all duration-200 ${
                        feedbackRating && rating <= feedbackRating
                          ? 'scale-110'
                          : ''
                      }`}
                    >
                      <Star 
                        className={`w-8 h-8 transition-colors ${
                          feedbackRating && rating <= feedbackRating
                            ? 'text-yellow-500 fill-yellow-500'
                            : 'text-gray-300 hover:text-yellow-400'
                        }`} 
                      />
                    </Button>
                  ))}
                </div>

                {feedbackRating && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                    className="flex items-center justify-center gap-2"
                  >
                    <span className={`font-medium ${getRatingColor(feedbackRating)}`}>
                      {getRatingText(feedbackRating)}
                    </span>
                    <Badge variant="outline" className="text-xs">
                      {feedbackRating}/5 sao
                    </Badge>
                  </motion.div>
                )}
              </div>

              {/* Feedback Comment */}
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <MessageCircle className="w-4 h-4 text-gray-500" />
                  <label className="text-sm font-medium">
                    Chia s·∫ª th√™m v·ªÅ tr·∫£i nghi·ªám c·ªßa b·∫°n (t√πy ch·ªçn)
                  </label>
                </div>
                <Textarea
                  placeholder="B·∫°n c√≥ th·ªÉ chia s·∫ª ƒëi·ªÅu g√¨ b·∫°n th√≠ch ho·∫∑c g·ª£i √Ω c·∫£i thi·ªán d·ªãch v·ª•..."
                  value={feedbackComment}
                  onChange={(e) => setFeedbackComment(e.target.value)}
                  rows={4}
                  className="resize-none"
                />
              </div>

              {/* Submit Feedback */}
              <div className="flex justify-center">
                <Button
                  onClick={handleSubmitFeedback}
                  disabled={!isValid || isSubmitting}
                  className="bg-purple-600 hover:bg-purple-700 text-white px-6"
                >
                  {isSubmitting ? (
                    <>
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                        className="w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"
                      />
                      ƒêang g·ª≠i...
                    </>
                  ) : (
                    <>
                      <Send className="w-4 h-4 mr-2" />
                      G·ª≠i ƒë√°nh gi√°
                    </>
                  )}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Next Steps */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 1.0 }}
      >
        <Card className="border-blue-200 dark:border-blue-800/50 bg-gradient-to-br from-blue-50/50 to-indigo-50/50 dark:from-blue-950/20 dark:to-indigo-950/20">
          <CardContent className="p-6">
            <div className="flex items-center gap-2 mb-4">
              <Sparkles className="w-5 h-5 text-blue-600" />
              <h3 className="text-lg font-semibold text-blue-700 dark:text-blue-300">
                B∆∞·ªõc ti·∫øp theo
              </h3>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* New Consultation */}
              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="p-4 bg-white/70 dark:bg-gray-800/70 rounded-lg border border-green-200 dark:border-green-700 cursor-pointer hover:border-green-300 dark:hover:border-green-600 transition-colors"
                onClick={handleStartNewConsultation}
              >
                <div className="flex items-center gap-3 mb-3">
                  <div className="p-2 bg-green-100 dark:bg-green-900/50 rounded-lg">
                    <Bot className="w-5 h-5 text-green-600 dark:text-green-400" />
                  </div>
                  <h4 className="font-medium text-green-700 dark:text-green-300">
                    T∆∞ v·∫•n m·ªõi
                  </h4>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                  B·∫Øt ƒë·∫ßu m·ªôt phi√™n t∆∞ v·∫•n AI m·ªõi cho c√°c tri·ªáu ch·ª©ng kh√°c
                </p>
                <Button variant="outline" size="sm" className="w-full border-green-200 hover:border-green-300 hover:bg-green-50 dark:border-green-700 dark:hover:border-green-600">
                  <RotateCcw className="w-4 h-4 mr-2" />
                  T∆∞ v·∫•n l·∫°i
                </Button>
              </motion.div>

              {/* Get Help */}
              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="p-4 bg-white/70 dark:bg-gray-800/70 rounded-lg border border-orange-200 dark:border-orange-700 cursor-pointer hover:border-orange-300 dark:hover:border-orange-600 transition-colors"
              >
                <div className="flex items-center gap-3 mb-3">
                  <div className="p-2 bg-orange-100 dark:bg-orange-900/50 rounded-lg">
                    <HelpCircle className="w-5 h-5 text-orange-600 dark:text-orange-400" />
                  </div>
                  <h4 className="font-medium text-orange-700 dark:text-orange-300">
                    C·∫ßn h·ªó tr·ª£ th√™m?
                  </h4>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                  Li√™n h·ªá v·ªõi d∆∞·ª£c sƒ© chuy√™n nghi·ªáp ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp
                </p>
                <Button variant="outline" size="sm" className="w-full border-orange-200 hover:border-orange-300 hover:bg-orange-50 dark:border-orange-700 dark:hover:border-orange-600">
                  <MessageCircle className="w-4 h-4 mr-2" />
                  Chat v·ªõi d∆∞·ª£c sƒ©
                </Button>
              </motion.div>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Action Buttons */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 1.2 }}
        className="grid grid-cols-1 md:grid-cols-3 gap-4"
      >
        <Button
          onClick={handleViewOrders}
          className="bg-blue-600 hover:bg-blue-700 text-white h-12 text-base font-medium flex items-center justify-center gap-2"
        >
          <FileText className="w-5 h-5" />
          Xem ƒë∆°n h√†ng
        </Button>

        <Button
          variant="outline"
          onClick={handleContinueShopping}
          className="border-green-200 hover:border-green-300 hover:bg-green-50 dark:border-green-800 dark:hover:border-green-700 dark:hover:bg-green-950/50 h-12 text-base font-medium flex items-center justify-center gap-2"
        >
          <ShoppingBag className="w-5 h-5" />
          Ti·∫øp t·ª•c mua s·∫Øm
        </Button>

        <Button
          variant="outline"
          onClick={handleGoHome}
          className="border-gray-200 hover:border-gray-300 hover:bg-gray-50 dark:border-gray-700 dark:hover:border-gray-600 dark:hover:bg-gray-950/50 h-12 text-base font-medium flex items-center justify-center gap-2"
        >
          <Home className="w-5 h-5" />
          V·ªÅ trang ch·ªß
        </Button>
      </motion.div>

      {/* Thank You Message */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 1.4 }}
        className="text-center py-6"
      >
        <div className="flex items-center justify-center gap-2 mb-3">
          <ThumbsUp className="w-5 h-5 text-emerald-600" />
          <span className="text-lg font-medium text-emerald-700 dark:text-emerald-300">
            C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Pharmacity!
          </span>
        </div>
        <p className="text-sm text-muted-foreground max-w-2xl mx-auto">
          Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn d·ªãch v·ª• t∆∞ v·∫•n AI t·ªët nh·∫•t v√† nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao. 
          S·ª©c kh·ªèe c·ªßa b·∫°n l√† ∆∞u ti√™n h√†ng ƒë·∫ßu c·ªßa ch√∫ng t√¥i.
        </p>
      </motion.div>
    </div>
  );
};
